@use 'sass:math';

$breakpoints: (
  xxs: 320px,
  xs: 360px,
  sm: 560px,
  md: 768px,
  lg: 1024px,
  xl: 1200px,
  xxl: 1600px,
  hd: 1920px,
);

// Mobile first approach
@mixin media($breakpoint, $limit: 0, $landscape: false) {
  $screen: $breakpoint;

  @if map-has-key($breakpoints, $breakpoint) {
    $screen: map-get($breakpoints, $breakpoint);
  }

  @if $limit != 0 and $landscape != true {
    @if map-has-key($breakpoints, $limit) {
      $limit: map-get($breakpoints, $limit) - 1;
    }
    @media (min-width: $screen) and (max-width: $limit) {
      @content;
    }
  } @else if $limit != 0 and $landscape {
    @if map-has-key($breakpoints, $limit) {
      $limit: map-get($breakpoints, $limit) - 1;
    }
    @media (min-width: $screen) and (max-width: $limit) and (orientation: landscape) {
      @content;
    }
  } @else if $landscape {
    @media (min-width: $screen) and (orientation: landscape) {
      @content;
    }
  } @else {
    @media (min-width: $screen) {
      @content;
    }
  }
}

@mixin animate($name, $params, $from: true) {
  @keyframes #{$name} {
    @if $from {
      from {
        @content;
      }
    } @else {
      @content;
    }
  }

  animation: $name $params;
}

@mixin absolute(
  $top: initial,
  $right: initial,
  $bottom: initial,
  $left: initial
) {
  position: absolute;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

/* position absolute
    @include flex(2rem, 3rem, auto, auto);
  */
@mixin flex($justify, $align: center, $direction: false) {
  display: flex;
  align-items: $align;
  justify-content: $justify;

  @if $direction {
    flex-direction: $direction;
  }
}

/// Event wrapper
/// @param {Bool} $self [false] - Whether or not to include current selector
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active {
      @content;
    }
  }
}

// Display mixins
@mixin show($screen: $screen-md) {
  display: none;

  @media only screen and (min-width: $screen) {
    display: block;
  }
}

@mixin hide($screen: $screen-md) {
  display: block;

  @media only screen and (min-width: $screen) {
    display: none;
  }
}

@function strip-unit($value) {
  @return math.div($value, $value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1==$u2 and $u1==$u3 and $u1==$u4 {
    & {
      font-size: $min-font-size;

      @media screen and (min-width: $min-vw) {
        font-size: calc(
          #{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} *
            ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
        ) !important;
      }

      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

@function rem($pixelValue, $remBase: 16) {
  @return calc(math.div($pixelValue, $remBase) * 1rem);
}
